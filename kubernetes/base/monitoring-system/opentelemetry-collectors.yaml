apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry
  namespace: monitoring-system
spec:
  envFrom:
  - secretRef:
      name: opentelemetry-collectors
  mode: statefulset
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: otel-collector
      otlp:
        protocols:
          grpc:
          http:
    extensions:
      basicauth/metrics:
        client_auth:
          username: $${env:METRICS_USERNAME}
          password: $${env:METRICS_PASSWORD}
      basicauth/traces:
        client_auth:
          username: $${env:TRACES_USERNAME}
          password: $${env:METRICS_PASSWORD}
    exporters:
      prometheusremotewrite:
        endpoint: $${env:METRICS_ENDPOINT}
        auth:
          authenticator: basicauth/metrics
        external_labels:
          cluster: $${env:CLUSTER_NAME}
      otlp:
        endpoint: $${env:TRACES_ENDPOINT}
        tls:
          insecure: false
        auth:
          authenticator: basicauth/traces
    processors:
      batch:
        send_batch_size: 1000
        send_batch_max_size: 3000
    service:
      extensions: [ basicauth/metrics, basicauth/traces ]
      pipelines:
        metrics:
          receivers: [ prometheus ]
          processors: [ batch ]
          exporters: [ prometheusremotewrite ]
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlp ]
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-sidecar
  namespace: monitoring-system
spec:
  mode: sidecar
  envFrom:
  - secretRef:
      name: opentelemetry-collectors
  config: |
    extensions:
      basicauth/traces:
        client_auth:
          username: $${env:TRACES_USERNAME}
          password: $${env:TRACES_PASSWORD}
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      batch:
        send_batch_size: 100
        send_batch_max_size: 300
    exporters:
      logging:
        loglevel: debug
      otlp:
        endpoint: $${env:TRACES_ENDPOINT}
        tls:
          insecure: false
        auth:
          authenticator: basicauth/traces
    service:
      extensions: [ basicauth/traces ]
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlp, logging ]
---
# TODO move to operator
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: opentelemetry-targetallocator
# rules:
# # Prometheus discovery
# - apiGroups:
#   - monitoring.coreos.com
#   resources:
#   - servicemonitors
#   - podmonitors
#   verbs:
#   - '*'
# - apiGroups: [""]
#   resources:
#   - nodes
#   - nodes/metrics
#   - services
#   - endpoints
#   - pods
#   - namespaces
#   verbs: ["get", "list", "watch"]
# - apiGroups: [""]
#   resources:
#   - configmaps
#   verbs: ["get"]
# - apiGroups:
#   - discovery.k8s.io
#   resources:
#   - endpointslices
#   verbs: ["get", "list", "watch"]
# - apiGroups:
#   - networking.k8s.io
#   resources:
#   - ingresses
#   verbs: ["get", "list", "watch"]
# - nonResourceURLs: ["/metrics"]
#   verbs: ["get"]
# # k8s events
# - apiGroups: [""]
#   resources: ["events"]
#   verbs: ["list", "watch"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: opentelemetry-targetallocator
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: opentelemetry-targetallocator
# subjects:
# - kind: ServiceAccount
#   name: opentelemetry-collector
#   namespace: monitoring-system
# ---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: opentelemetry
  namespace: monitoring-system
spec:
  exporter:
    endpoint: http://opentelemetry-collector.monitoring-system:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  resource:
    # resourceAttributes:
    #   k8s.cluster.name: ${CLUSTER_NAME}
    addK8sUIDAttributes: true
  env:
    # disable due to ingest limits
    # https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#exporter-selection
    - name: OTEL_METRICS_EXPORTER
      value: none
  python:
    env:
      # Required if endpoint is set to 4317.
      # Python autoinstrumentation uses http/proto by default
      # so data must be sent to 4318 instead of 4317.
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://opentelemetry-collector.monitoring-system:4318
      - name: OTEL_METRICS_EXPORTER
        value: none
  dotnet:
    env:
      # Required if endpoint is set to 4317.
      # Dotnet autoinstrumentation uses http/proto by default
      # See https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/blob/888e2cd216c77d12e56b54ee91dafbc4e7452a52/docs/config.md#otlp
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://opentelemetry-collector.monitoring-system:4318
  apacheHttpd:
    image: ghcr.io/pl4nty/otel-operator-autoinstrumentation-apache-httpd@sha256:bb29da039d37aadbcef59bed55740b10c6beee443a69d730b7210ea15130f7a2
  #   configPath: /etc/php/7.4/apache2/conf.d # HRConvert2
---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: opentelemetry-sidecar
  namespace: monitoring-system
spec:
  exporter:
    endpoint: http://localhost:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  resource:
    # resourceAttributes:
    #   k8s.cluster.name: ${CLUSTER_NAME}
    addK8sUIDAttributes: true
  env:
    # disable due to ingest limits
    # https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#exporter-selection
    - name: OTEL_METRICS_EXPORTER
      value: none
  go:
    image: ghcr.io/open-telemetry/opentelemetry-go-instrumentation/autoinstrumentation-go:v0.3.0-alpha
    resourceRequirements:
      limits:
        memory: 320Mi
