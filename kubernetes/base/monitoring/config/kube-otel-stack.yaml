apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-otel-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-otel-stack
      version: 0.2.7
      sourceRef:
        kind: HelmRepository
        name: otel-collector
        namespace: flux-system
  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  test:
    enable: true
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  maxHistory: 3
  values:
    metricsCollector:
      replicas: 1
      targetAllocator:
        replicas: 1
      env:
      - name: LS_TOKEN
        value: ""
      - name: GRAFANA_API_KEY
        valueFrom:
          secretKeyRef:
            key: TRACES_PASSWORD
            name: opentelemetry-collector
      - name: TRACES_USERNAME
        valueFrom:
          secretKeyRef:
            key: TRACES_USERNAME
            name: opentelemetry-collector
      - name: METRICS_USERNAME
        valueFrom:
          secretKeyRef:
            key: METRICS_USERNAME
            name: opentelemetry-collector
      - name: LOGS_USERNAME
        valueFrom:
          secretKeyRef:
            key: LOGS_USERNAME
            name: opentelemetry-collector
      - name: TRACES_ENDPOINT
        valueFrom:
          secretKeyRef:
            key: TRACES_ENDPOINT
            name: opentelemetry-collector
      - name: METRICS_ENDPOINT
        valueFrom:
          secretKeyRef:
            key: METRICS_ENDPOINT
            name: opentelemetry-collector
      - name: LOGS_ENDPOINT
        valueFrom:
          secretKeyRef:
            key: LOGS_ENDPOINT
            name: opentelemetry-collector
      - name: CLUSTER_NAME
        valueFrom:
          secretKeyRef:
            key: CLUSTER_NAME
            name: opentelemetry-collector
      config:
        receivers:
          filelog:
            include: [ /var/log/pods/*/*/*.log ]
            exclude: []
            start_at: beginning
            include_file_path: true
            include_file_name: false
            operators:
              # Find out which format is used by kubernetes
              - type: router
                id: get-format
                routes:
                  - output: parser-docker
                    expr: 'body matches "^\\\{"'
                  - output: parser-crio
                    expr: 'body matches "^[^ Z]+ "'
                  - output: parser-containerd
                    expr: 'body matches "^[^ Z]+Z"'
              # Parse CRI-O format
              - type: regex_parser
                id: parser-crio
                regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
                output: extract_metadata_from_filepath
                timestamp:
                  parse_from: attributes.time
                  layout_type: gotime
                  layout: '2006-01-02T15:04:05.000000000-07:00'
              # Parse CRI-Containerd format
              - type: regex_parser
                id: parser-containerd
                regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
                output: extract_metadata_from_filepath
                timestamp:
                  parse_from: attributes.time
                  layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              # Parse Docker format
              - type: json_parser
                id: parser-docker
                output: extract_metadata_from_filepath
                timestamp:
                  parse_from: attributes.time
                  layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              # Extract metadata from file path
              - type: regex_parser
                id: extract_metadata_from_filepath
                regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
                parse_from: attributes["log.file.path"]
              # Rename attributes
              - type: move
                from: attributes.stream
                to: attributes["log.iostream"]
              - type: move
                from: attributes.container_name
                to: resource["k8s.container.name"]
              - type: move
                from: attributes.namespace
                to: resource["k8s.namespace.name"]
              - type: move
                from: attributes.pod_name
                to: resource["k8s.pod.name"]
              - type: move
                from: attributes.restart_count
                to: resource["k8s.container.restart_count"]
              - type: move
                from: attributes.uid
                to: resource["k8s.pod.uid"]
              # Clean up log body
              - type: move
                from: attributes.log
                to: body
        extensions:
          basicauth/traces:
            client_auth:
              username: $${env:TRACES_USERNAME}
              password: $${env:GRAFANA_API_KEY}
          basicauth/metrics:
            client_auth:
              username: $${env:METRICS_USERNAME}
              password: $${env:GRAFANA_API_KEY}
          basicauth/logs:
            client_auth:
              username: $${env:LOGS_USERNAME}
              password: $${env:GRAFANA_API_KEY}
        processors:
          batch:
            send_batch_max_size: 10000
        exporters:
          otlp:
            endpoint: $${env:TRACES_ENDPOINT}
            auth:
              authenticator: basicauth/traces
            tls:
              insecure: false
          prometheusremotewrite:
            endpoint: $${env:METRICS_ENDPOINT}
            auth:
              authenticator: basicauth/metrics
            external_labels:
              cluster: $${env:CLUSTER_NAME}
          loki:
            endpoint: $${env:LOGS_ENDPOINT}
            auth:
              authenticator: basicauth/logs
        service:
          extensions:
          - health_check
          - basicauth/traces
          - basicauth/metrics
          - basicauth/logs
          pipelines:
            metrics:
              receivers: [prometheus]
              processors: [memory_limiter, resource, batch]
              exporters: [prometheusremotewrite]
            logs:
              receivers: [ filelog, k8s_events ]
              processors: [ batch ]
              exporters: [ loki ]
        k8s_events:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opentelemetry-events
rules:
# - apiGroups: [""]
#   resources:
#   - configmaps
#   verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opentelemetry-events
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opentelemetry-events
subjects:
- kind: ServiceAccount
  name: kube-otel-stack-collector
  namespace: monitoring
