apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry
  namespace: monitoring
spec:
  envFrom:
  - secretRef:
      name: opentelemetry-collector
  # https://github.com/open-telemetry/opentelemetry-operator/tree/main/cmd/otel-allocator
  # TODO install CRDs with https://github.com/prometheus-operator/prometheus-operator/releases
  mode: statefulset
  targetAllocator:
    enabled: true
    image: ghcr.io/open-telemetry/opentelemetry-operator/target-allocator:v0.81.0
    prometheusCR:
      enabled: true
  volumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  # target_allocator can be removed once this is merged: open-telemetry/opentelemetry-operator#1557
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      k8s_events: {}
      prometheus:
        config:
          scrape_configs:
          - job_name: otel-collector
        target_allocator:
          endpoint: http://opentelemetry-targetallocator
          interval: 1m
          collector_id: $${env:POD_NAME}
      filelog:
        include: [ /var/log/pods/*/*/*.log ]
        exclude: [ ]
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.000000000-07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
          # Clean up log body
          - type: move
            from: attributes.log
            to: body

    extensions:
      basicauth/traces:
        client_auth:
          username: $${env:TRACES_USERNAME}
          password: $${env:METRICS_PASSWORD}
      basicauth/metrics:
        client_auth:
          username: $${env:METRICS_USERNAME}
          password: $${env:METRICS_PASSWORD}
      basicauth/logs:
        client_auth:
          username: $${env:LOGS_USERNAME}
          password: $${env:METRICS_PASSWORD}

    exporters:
      otlp:
        endpoint: $${env:TRACES_ENDPOINT}
        tls:
          insecure: false
        auth:
          authenticator: basicauth/traces
      prometheusremotewrite:
        endpoint: $${env:METRICS_ENDPOINT}
        auth:
          authenticator: basicauth/metrics
        external_labels:
          cluster: $${env:CLUSTER_NAME}
      loki:
        endpoint: $${env:LOGS_ENDPOINT}
        auth:
          authenticator: basicauth/logs

    processors:
      batch:
        send_batch_size: 1000
        send_batch_max_size: 3000
      attributes:
        actions:
        - action: insert
          key: __path__
          from_attribute: log.file.path
        - action: insert
          key: loki.attribute.labels
          value: __path__
      resource:
        attributes:
        - action: insert
          key: loki.format
          value: raw
        - action: insert
          key: namespace
          from_attribute: k8s.namespace.name
        - action: insert
          key: pod
          from_attribute: k8s.pod.name
        - action: insert
          key: container
          from_attribute: k8s.container.name
        - action: insert
          key: cluster
          value: $${env:CLUSTER_NAME}
        - action: insert
          key: loki.resource.labels
          value: namespace, pod, container, cluster

    service:
      extensions: [ basicauth/traces, basicauth/metrics, basicauth/logs ]
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlp ]
        metrics:
          receivers: [ prometheus ]
          processors: [ batch ]
          exporters: [ prometheusremotewrite ]
        logs:
          receivers: [ filelog, k8s_events ]
          processors: [ attributes, resource, batch ]
          exporters: [ loki ]
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-sidecar
  namespace: monitoring
spec:
  mode: sidecar
  envFrom:
  - secretRef:
      name: opentelemetry-collector
  config: |
    extensions:
      basicauth/traces:
        client_auth:
          username: $${env:TRACES_USERNAME}
          password: $${env:TRACES_PASSWORD}
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      batch:
        send_batch_size: 100
        send_batch_max_size: 300
    exporters:
      logging:
        loglevel: debug
      otlp:
        endpoint: $${env:TRACES_ENDPOINT}
        tls:
          insecure: false
        auth:
          authenticator: basicauth/traces
    service:
      extensions: [ basicauth/traces ]
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlp, logging ]
---
# TODO move to operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opentelemetry-targetallocator
rules:
# Prometheus discovery
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  - podmonitors
  verbs:
  - '*'
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  - namespaces
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs: ["get", "list", "watch"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
# k8s events
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opentelemetry-targetallocator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opentelemetry-targetallocator
subjects:
- kind: ServiceAccount
  name: opentelemetry-collector
  namespace: monitoring
---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: opentelemetry-instrumentation
  namespace: monitoring
spec:
  exporter:
    endpoint: http://opentelemetry-collector.monitoring:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  resource:
    resourceAttributes:
      k8s.cluster.name: ${CLUSTER_NAME}
    addK8sUIDAttributes: true
  env:
    # disable due to ingest limits
    # https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#exporter-selection
    - name: OTEL_METRICS_EXPORTER
      value: none
  python:
    env:
      # Required if endpoint is set to 4317.
      # Python autoinstrumentation uses http/proto by default
      # so data must be sent to 4318 instead of 4317.
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://opentelemetry-collector.monitoring:4318
      - name: OTEL_METRICS_EXPORTER
        value: none
  dotnet:
    env:
      # Required if endpoint is set to 4317.
      # Dotnet autoinstrumentation uses http/proto by default
      # See https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/blob/888e2cd216c77d12e56b54ee91dafbc4e7452a52/docs/config.md#otlp
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://opentelemetry-collector.monitoring:4318
  apacheHttpd:
    image: ghcr.io/pl4nty/otel-operator-autoinstrumentation-apache-httpd@sha256:79e213330ce7616b3f40d6e49055eb779106ded684ad8a90db8ca1bebb42a756
  #   configPath: /etc/php/7.4/apache2/conf.d # HRConvert2
---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: opentelemetry-instrumentation-sidecar
  namespace: monitoring
spec:
  exporter:
    endpoint: http://localhost:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  resource:
    resourceAttributes:
      k8s.cluster.name: ${CLUSTER_NAME}
    addK8sUIDAttributes: true
  env:
    # disable due to ingest limits
    # https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#exporter-selection
    - name: OTEL_METRICS_EXPORTER
      value: none
  go:
    image: ghcr.io/open-telemetry/opentelemetry-go-instrumentation/autoinstrumentation-go:v0.2.2-alpha
    resourceRequirements:
      limits:
        memory: 320Mi
---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: opentelemetry-instrumentation-sidecar-gitlab
  namespace: monitoring
spec:
  exporter:
    endpoint: http://localhost:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  resource:
    resourceAttributes:
      k8s.cluster.name: ${CLUSTER_NAME}
    addK8sUIDAttributes: true
  env:
    # disable due to ingest limits
    # https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/#exporter-selection
    - name: OTEL_METRICS_EXPORTER
      value: none
  go:
    image: ghcr.io/open-telemetry/opentelemetry-go-instrumentation/autoinstrumentation-go:v0.2.1-alpha
    resourceRequirements:
      limits:
        memory: 320Mi
