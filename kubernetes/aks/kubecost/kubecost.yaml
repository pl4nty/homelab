apiVersion: v1
kind: Namespace
metadata:
  name: kubecost
---
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: kubecost-charts
  namespace: kubecost
spec:
  url: https://kubecost.github.io/cost-analyzer
  interval: 30m
  timeout: 3m
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kubecost
  namespace: kubecost
spec:
  interval: 2m
  chart:
    spec:
      chart: cost-analyzer
      sourceRef:
        kind: HelmRepository
        name: kubecost-charts
  values:
    global:
      prometheus:
        enabled: false
        fqdn: https://prometheus-prod-09-prod-au-southeast-0.grafana.net/api/prom/
        queryServiceBasicAuthSecretName: grafana-prom-creds
      grafana:
        enabled: false
        domainName: tplant.grafana.net
        scheme: https
      notifications:
        alertmanager:
          enabled: true
          fqdn: https://alertmanager-prod-au-southeast-0.grafana.net
    prometheus:
      # nodeExporter:
      #   enabled: false
      # serviceAccounts:
      #   nodeExporter:
      #     enabled: false
      kubeStateMetrics:
        enabled: false
    persistentVolume:
      enabled: false
      # size: 1Gi
      # dbSize: 1Gi
    readonly: true
    networkCosts:
      enabled: true
      config:
        services:
          azure-cloud-services: true
    serviceMonitor:
      enabled: true
    #   networkCosts:
    #     enabled: true
    kubecostProductConfigs:
      grafanaURL: https://tplant.grafana.net
      currency: AUD
      azureClientID: 04217cc9-fda2-4765-9d0f-84d2b8058228
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: kubecost
  namespace: kubecost
spec:
  parentRefs:
  - name: gateway
    namespace: default
    sectionName: http
  hostnames:
  - kubecost.tplant.au
  rules:
  - backendRefs:
    - name: kubecost-cost-analyzer
      port: 9090

# Unsupported by grafana-agent-operator as of 14.1.23
# namespace: "kubecost"
# groups:
# - name: CPU
#   rules:
#     - expr: sum(rate(container_cpu_usage_seconds_total{container_name!=""}[5m]))
#       record: cluster:cpu_usage:rate5m
#     - expr: rate(container_cpu_usage_seconds_total{container_name!=""}[5m])
#       record: cluster:cpu_usage_nosum:rate5m
#     - expr: avg(irate(container_cpu_usage_seconds_total{container_name!="POD", container_name!=""}[5m])) by (container_name,pod_name,namespace)
#       record: kubecost_container_cpu_usage_irate
#     - expr: sum(container_memory_working_set_bytes{container_name!="POD",container_name!=""}) by (container_name,pod_name,namespace)
#       record: kubecost_container_memory_working_set_bytes
#     - expr: sum(container_memory_working_set_bytes{container_name!="POD",container_name!=""})
#       record: kubecost_cluster_memory_working_set_bytes
# - name: Savings
#   rules:
#     - expr: sum(avg(kube_pod_owner{owner_kind!="DaemonSet"}) by (pod) * sum(container_cpu_allocation) by (pod))
#       record: kubecost_savings_cpu_allocation
#       labels:
#         daemonset: "false"
#     - expr: sum(avg(kube_pod_owner{owner_kind="DaemonSet"}) by (pod) * sum(container_cpu_allocation) by (pod)) / sum(kube_node_info)
#       record: kubecost_savings_cpu_allocation
#       labels:
#         daemonset: "true"
#     - expr: sum(avg(kube_pod_owner{owner_kind!="DaemonSet"}) by (pod) * sum(container_memory_allocation_bytes) by (pod))
#       record: kubecost_savings_memory_allocation_bytes
#       labels:
#         daemonset: "false"
#     - expr: sum(avg(kube_pod_owner{owner_kind="DaemonSet"}) by (pod) * sum(container_memory_allocation_bytes) by (pod)) / sum(kube_node_info)
#       record: kubecost_savings_memory_allocation_bytes
#       labels:
#         daemonset: "true"

